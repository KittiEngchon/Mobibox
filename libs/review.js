// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
async function loadReviews() {
  const res = await fetch('/data/reviews.json');
  const data = await res.json();
  return data;
}

// ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏ï‡∏≤‡∏° id
async function getReviewsByApp(appId) {
  const all = await loadReviews();
  return all.filter(r => r.appId === appId);
}

// ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏∑‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (mock ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
async function checkReviewEligibility(userAddress) {
  const res = await fetch('/data/tokens.json');
  const tokens = await res.json();

  for (const token of tokens) {
    const balance = await getTokenBalance(token.address, userAddress);
    if (balance > 0) return true;
  }
  return false;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Å token balance
async function getTokenBalance(tokenAddress, userAddress) {
  // ‡πÉ‡∏ä‡πâ web3.js ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å balanceOf ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ERC-20
  const token = new window.web3.eth.Contract([
    { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }],
      "name": "balanceOf", "outputs": [{ "name": "balance", "type": "uint256" }],
      "type": "function"
    }
  ], tokenAddress);

  const raw = await token.methods.balanceOf(userAddress).call();
  return parseFloat(window.web3.utils.fromWei(raw, 'ether'));
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
async function getAverageRating(appId) {
  const reviews = await getReviewsByApp(appId);
  if (reviews.length === 0) return 0;
  const sum = reviews.reduce((total, r) => total + (r.rating || 0), 0);
  return (sum / reviews.length).toFixed(1);
}

// ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞ POST ‡πÑ‡∏õ backend ‡πÅ‡∏ï‡πà‡πÉ‡∏ô mock ‡πÄ‡∏£‡∏≤‡πÅ‡∏Ñ‡πà log)
function submitReview({ appId, reviewer, comment, rating }) {
  console.log("üì§ Review Submitted:", { appId, reviewer, comment, rating });
  showToast("‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß!");
}
