// libs/ai.js

// ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å NovaVault ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô developer reputation ----------
async function getDeveloperReputation(address) {
  try {
    const res = await fetch(`https://api.novavault.network/reputation/${address}`);
    const data = await res.json();
    return data.score || 50;
  } catch (e) {
    console.warn("NovaVault API failed, fallback to 50");
    return 50;
  }
}

// ---------- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Sentiment ‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ----------
function analyzeSentiment(text) {
  const positiveWords = ['‡∏î‡∏µ', '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°', '‡∏ä‡∏≠‡∏ö', '‡πÄ‡∏£‡πá‡∏ß', '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠'];
  const negativeWords = ['‡πÇ‡∏Å‡∏á', '‡πÅ‡∏¢‡πà', '‡∏ä‡πâ‡∏≤', '‡∏´‡∏•‡∏≠‡∏Å', '‡∏ö‡∏±‡πä‡∏Å', '‡∏´‡∏≤‡∏¢'];

  let score = 0;
  const words = text.toLowerCase().split(/\s+/);
  words.forEach(w => {
    if (positiveWords.includes(w)) score++;
    if (negativeWords.includes(w)) score--;
  });

  return score;
}

// ---------- ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô ----------
function summarizeReviews(reviews) {
  if (!Array.isArray(reviews) || reviews.length === 0) return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß";

  const keywords = {};
  reviews.forEach(r => {
    const words = r.text.toLowerCase().split(/\s+/);
    words.forEach(w => {
      if (w.length > 3) keywords[w] = (keywords[w] || 0) + 1;
    });
  });

  const sorted = Object.entries(keywords).sort((a, b) => b[1] - a[1]);
  const topWords = sorted.slice(0, 5).map(([word]) => word);
  return `‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: ${topWords.join(", ")}`;
}

// ---------- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Trust Score ‡∏î‡πâ‡∏ß‡∏¢ AI ----------
async function calculateTrustScoreAI(app, reviews) {
  let score = 50;

  if (app.badges.includes("verified")) score += 15;
  if (app.badges.includes("kyc-passed")) score += 10;
  if (app.badges.includes("audited")) score += 10;
  if (app.badges.includes("ai-certified")) score += 5;

  const avgRating = reviews.length > 0
    ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length
    : 0;
  score += (avgRating - 3) * 10;

  const sentiment = reviews.reduce((sum, r) => sum + analyzeSentiment(r.comment || r.text || ""), 0);
  score += sentiment;

  const repScore = await getDeveloperReputation(app.developer);
  score += (repScore - 50) * 0.5;

  return Math.max(0, Math.min(100, Math.round(score)));
}

// ---------- AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ----------
async function getAIInsights(appId, reviews) {
  const app = await getAppById(appId); // ‡πÉ‡∏ä‡πâ helper ‡∏à‡∏≤‡∏Å libs ‡∏≠‡∏∑‡πà‡∏ô
  const trust = await calculateTrustScoreAI(app, reviews);
  const summary = summarizeReviews(reviews);
  const suggestion = trust < 50
    ? "‚ö†Ô∏è ‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≥"
    : trust < 70
      ? "üîç ‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
      : "‚úÖ ‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à";

  return { trustScore: trust, summary, suggestion };
}

